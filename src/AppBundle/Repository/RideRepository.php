<?php

namespace AppBundle\Repository;


use AppBundle\Entity\Course;
use AppBundle\Entity\ParticipantCourse;
use AppBundle\Entity\User;
use Cassandra\Date;
use DateTime;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;

/**
 * RideRepository
 *
 * This class was generated by the PhpStorm "Php Annotations" Plugin. Add your own custom
 * repository methods below.
 */
class RideRepository extends EntityRepository
{
    /**
     * @param User $user
     * @return array
     * @throws \Exception
     */
    public function findActiveRideParticipant(User $user)
    {
        return $this->createQueryBuilder("a")
            ->where("a.participant = :participant")
            ->setParameter("participant", $user->getId())
            ->andWhere("a.status = 'busy'")
            ->andWhere("a.dateTime > :now")
            ->orderBy('a.dateTime', 'ASC')
            ->setParameter("now", new \DateTime)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param User $user
     * @return array
     * @throws \Exception
     */
    public function findActiveRideInstructor(User $user)
    {
        return $this->createQueryBuilder("a")
            ->where("a.instructor = :instructor")
            ->setParameter("instructor", $user->getId())
            ->andWhere("a.status != 'free'")
            ->andWhere("a.dateTime > :now")
            ->orderBy('a.dateTime', 'ASC')
            ->setParameter("now", new \DateTime)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param User $user
     * @param \DateTime $dateTime
     * @return ArrayCollection
     */
    public function findDayReservation(User $user, \DateTime $dateTime)
    {
        $result = $this->createQueryBuilder('u')
            ->where('u.dateTime >= :date_start')
            ->andWhere('u.dateTime <= :date_end')
            ->setParameter('date_start', $dateTime->format('Y-m-d 00:00:00'))
            ->setParameter('date_end', $dateTime->format('Y-m-d 23:59:59'))
            ->andWhere("u.participant = :participant")
            ->andWhere("u.status = 'busy'")
            ->setParameter('participant', $user->getId())
            ->getQuery()->getResult();

        $collection = new ArrayCollection($result);
        return $collection;
    }

    /**
     * @param ParticipantCourse $participantCourse
     * @return array
     * @throws \Exception
     */
    public function findFinishedRide(ParticipantCourse $participantCourse)
    {
        return $this->createQueryBuilder("a")
            ->where("a.participant_course = :participant_course")
            ->setParameter("participant_course", $participantCourse->getId())
            ->andWhere("a.dateTime < :now")
            ->setParameter("now", new \DateTime)
            ->getQuery()
            ->getResult();
    }

    /**
     * @param ParticipantCourse $participantCourse
     * @return array
     * @throws \Exception
     */
    public function findNotFinishedRide(ParticipantCourse $participantCourse)
    {
        return $this->createQueryBuilder("a")
            ->where("a.participant_course = :participant_course")
            ->setParameter("participant_course", $participantCourse->getId())
            ->andWhere("a.dateTime >= :now")
            ->setParameter("now", new \DateTime)
            ->andWhere("a.status != 'free'")
            ->getQuery()
            ->getResult();
    }

    /**
     * @param User $user
     * @param \DateTime $start_time
     * @param DateTime $finish_time
     * @return ArrayCollection
     * @throws \Exception
     */
    public function findFinished(User $user, $start_time, DateTime $finish_time)
    {
        $dt = new DateTime();
        $dt->format('Y-m-d H:i:s');
        $result = $this->createQueryBuilder('u')
            ->where('u.dateTime >= :date_start')
            ->andWhere('u.dateTime <= :date_end')
            ->setParameter('date_start', $start_time->format('Y-m-d 00:00:00'))
            ->setParameter('date_end', $finish_time->format('Y-m-d 23:59:59'))
            ->andWhere("u.instructor = :instructor and u.status = 'busy'")
            ->setParameter('instructor', $user->getId())
            ->getQuery()->getResult();

        $collection = new ArrayCollection($result);
        return $collection;
    }

}
